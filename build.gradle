import edu.wpi.first.gradlerio.deploy.roborio.RoboRIO

plugins {
	id "java"
	id "idea"
	id "edu.wpi.first.GradleRIO" version "2022.3.1"
}


sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

def ROBOT_MAIN_CLASS = "org.frc5687.rapidreact.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
	targets {
		roborio(getTargetTypeClass('RoboRIO')) {
			// Team number is loaded either from the .wpilib/wpilib_preferences.json
			// or from command line. If not found an exception will be thrown.
			// You can use getTeamOrDefault(team) instead of getTeamNumber if you
			// want to store a team number in this file.
			team = project.frc.getTeamNumber()
			debug = project.frc.getDebugOrDefault(false)

			artifacts {
				// First part is artifact name, 2nd is artifact type
				// getTargetTypeClass is a shortcut to get the class type using a string

				frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
				}

				// Static files artifact
				frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
					files = project.fileTree('src/main/deploy')
					directory = '/home/lvuser/deploy'
				}
			}
		}
	}
}

def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
def includeDesktopSupport = false

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
	implementation wpi.java.deps.wpilib()
	implementation wpi.java.vendor.java()

	roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
	roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

	roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
	roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

	nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
	nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
	simulationDebug wpi.sim.enableDebug()

	nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
	nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
	simulationRelease wpi.sim.enableRelease()

	testImplementation 'junit:junit:4.12'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
	from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
	manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

task gitInfo(dependsOn: build) {
    description = 'Logs git branch and version to build'
    def cmd = 'git rev-parse --abbrev-ref HEAD'
    project.ext.branch = cmd.execute().text.trim()
    cmd = 'git rev-parse --short HEAD'
    project.ext.revision = cmd.execute().text.trim()

    println '[branch] ' + project.branch
    println '[commit] ' + project.revision
}

task gitLog {
    description = 'Logs git branch and version to log file when deploy'
    def logFile = new File('src/main/java/org/frc5687/rapidreact/util/Version.java')

    def cmd = 'git diff HEAD --shortstat'
    def mod = cmd.execute().text.trim()
    def modified = (mod != null && mod.length() != 0) ? ' *' : ''
    def br = '\n\n'
    def reader = 'package org.frc5687.rapidreact.util;' + br
    reader += '/**\n * A version class to read current Git information from deployed robot code\n * @author wilstenholme\n */' + br
    reader += 'public class Version {\n'
    reader += '    public static final String BRANCH = \"' + project.branch + '\";\n'
    reader += '    public static final String REVISION = \"' + project.revision + '\";\n'
    reader += '    public static final String MODIFIED = \"' +  modified + '\";\n'
    reader += '}'
    logFile.text = reader
}
